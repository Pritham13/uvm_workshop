////----------------------------------------------------------------------
//// This file has been automatically generated by
//// VerifStudio Software Version 0.63, Accelver Systems Inc.
//// Any modifications that you make to this file may be
//// overwritten by the tool when regenerating the files. 
////----------------------------------------------------------------------

`ifndef AHB_CONFIG_PCOUNTER_TESTBENCH_TOP__SV
`define AHB_CONFIG_PCOUNTER_TESTBENCH_TOP__SV

`include "clock_generator.sv"
`include "reset_generator.sv"
`include "ahb_config_pcounter_defines.sv"

module ahb_config_pcounter_testbench_top();

    import uvm_pkg::*;
    import ahb_config_pcounter_test_pkg::*;
    import ahb_enum_pkg::*;
    import ahb_master_transaction_pkg::*;
    import ahb_master_agent_pkg::*;

    typedef enum bit {ACTIVE_LOW=1'b0, ACTIVE_HIGH=1'b1} rst_polarity_enum;

    // Declare all the Nets used at the Top Level.
    wire  clk_sig_0;
    wire  rst_sig_0;

    // Instantiate the Actual HardWare Interfaces.
    ahb_interface#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) ahb_slave_interface(.vk_clk_port(clk_sig_0),.vk_rst_port(rst_sig_0));

    virtual ahb_interface#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) vif_0;

    // Instantiate the Hardware Components
    pcounter_ahb_wrapper#(.ADDR_WIDTH(32), .DATA_WIDTH(32)) dut(
  								.haddr(ahb_slave_interface.HADDR),
								.hwdata(ahb_slave_interface.HWDATA),
								.hreset_n(ahb_slave_interface.HRESETn),
								.hsel(ahb_slave_interface.HSELx),
								.hready_in(ahb_slave_interface.HREADY_IN),
								.hwrite(ahb_slave_interface.HWRITE),
								.hclk(ahb_slave_interface.HCLK),
								.htrans(ahb_slave_interface.HTRANS),
								.hburst(ahb_slave_interface.HBURST),
								.hsize(ahb_slave_interface.HSIZE),
								.hrdata(ahb_slave_interface.HRDATA),
								.hready(ahb_slave_interface.HREADY),
								.hprot(ahb_slave_interface.HPROT),
								.hresp(ahb_slave_interface.HRESP)
								);

    clock_generator#(.TIME_PERIOD(10)) clk_gen_inst_0();
    reset_generator#(.POWER_ON_DELAY(15), .POLARITY(ACTIVE_LOW)) rst_gen_inst_0();

    // "ahb_slave_interface(AHB)" Interface Port-Mappings to Input Ports on the Instance "dut"
    // assign dut.haddr = ahb_slave_interface.HADDR;
    // assign dut.hwdata = ahb_slave_interface.HWDATA;
    // assign dut.hreset_n = ahb_slave_interface.HRESETn;
    // assign dut.hsel = ahb_slave_interface.HSELx;
    // assign dut.hready_in = ahb_slave_interface.HREADY_IN;
    // assign dut.hwrite = ahb_slave_interface.HWRITE;
    // assign dut.hclk = ahb_slave_interface.HCLK;
    // assign dut.htrans = ahb_slave_interface.HTRANS;
    // assign dut.hburst = ahb_slave_interface.HBURST;
    // assign dut.hsize = ahb_slave_interface.HSIZE;

    // "ahb_slave_interface(AHB)" Interface Port-Mappings to Output Ports on the Instance "dut"
    // assign ahb_slave_interface.HRDATA = dut.hrdata;
    // assign ahb_slave_interface.HREADY = dut.hready;
    // assign ahb_slave_interface.HPROT = dut.hprot[3:0];
    // assign ahb_slave_interface.HRESP = ahb_response_e'(dut.hresp);


    // Adhoc/Net Connections to Output Ports of the Instance "clk_gen_inst_0"
    assign clk_sig_0 = clk_gen_inst_0.clk_out;

    // Adhoc/Net Connections to Input Ports of the Instance "rst_gen_inst_0"
    assign rst_gen_inst_0.clk_in = clk_sig_0;

    // Adhoc/Net Connections to Output Ports of the Instance "rst_gen_inst_0"
    assign rst_sig_0 = rst_gen_inst_0.rst_out;

    initial
    begin
        // Assigning the virtual interface variables  to the SvInterfaceInstances
        vif_0 = ahb_slave_interface;

        // Set the virtual interfaces to the config db
        uvm_config_db#(virtual ahb_interface#(.ADDR_WIDTH(16), .DATA_WIDTH(16)))::set(uvm_root::get(), "*", "vif_0", vif_0);

`ifdef VCD_DUMP

        // ------------------------------------
        // To dump the waveform in vcd format..
        // ------------------------------------

        // Enable VCD Dump of top-module and all sub-modules
        $dumpfile("test.vcd");
        $dumpvars(0, ahb_config_pcounter_testbench_top);

`endif // `ifdef VCD_DUMP

`ifdef FSDB_DUMP

        // -------------------------------------
        // To dump the waveform in fsdb format..
        // -------------------------------------

        // Enable FSDB Dump of the top-module and all the variables in
        // all lower level modules instantiated by this top module
        $fsdbDumpvars(0, ahb_config_pcounter_testbench_top);

`endif // `ifdef FSDB_DUMP

        run_test();

    end

endmodule : ahb_config_pcounter_testbench_top

`endif
