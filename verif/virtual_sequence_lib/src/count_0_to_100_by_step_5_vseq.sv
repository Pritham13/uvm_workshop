////----------------------------------------------------------------------
//// This file has been automatically generated by
//// VerifStudio Software Version 0.63, Accelver Systems Inc.
//// Any modifications that you make to this file may be
//// overwritten by the tool when regenerating the files. 
////----------------------------------------------------------------------

`ifndef COUNT_0_TO_100_BY_STEP_5_VSEQ__SV
`define COUNT_0_TO_100_BY_STEP_5_VSEQ__SV

class count_0_to_100_by_step_5_vseq extends uvm_sequence#( uvm_sequence_item );

    // Register the class count_0_to_100_by_step_5_vseq with the factory.
    `uvm_object_utils(count_0_to_100_by_step_5_vseq)

    // Set the handle to the virtual sequencer.
    `uvm_declare_p_sequencer(ahb_config_pcounter_virtual_sequencer)

    // The Constructor for this Class.
    function new(string name="count_0_to_100_by_step_5_vseq");
        super.new(name);
    endfunction: new

    // Declare the body of the Sequence
    extern task body();

    extern task exec_basic_block_0();

endclass: count_0_to_100_by_step_5_vseq


task count_0_to_100_by_step_5_vseq::body();

    exec_basic_block_0();

endtask : body


task count_0_to_100_by_step_5_vseq::exec_basic_block_0();

    begin

	// Declare the lower level Sequences that are used inside this Sequence
	write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) subSeq_0;

	// Create the lower level Sequence objects used.
	subSeq_0 = write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16))::type_id::create("subSeq_0");

	// Randomize the lower level sequences with their constriants
	if(!subSeq_0.randomize() with 
			   {
			    m_m_address == `AHB_CONFIG_PCOUNTER_BASE_ADDR + `CSR_MIN;
			    m_m_wdata == 'h0;
			   })
	begin
	    `uvm_fatal(get_type_name(), "[RAND_FAILED]: Randomization failed due to violation of transaction constraints.")
	end

	// Start the Sub-Sequences on a sequencer.
	subSeq_0.start(p_sequencer.ahb_master_sequencer_0);

    end
	begin

		// Declare the lower level Sequences that are used inside this Sequence
		write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) subSeq_1;

		// Create the lower level Sequence objects used.
		subSeq_1 = write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16))::type_id::create("subSeq_1");

		// Randomize the lower level sequences with their constriants
		if(!subSeq_1.randomize() with 
				   {
				    m_m_address == `AHB_CONFIG_PCOUNTER_BASE_ADDR + `CSR_MAX;
				    m_m_wdata == 100;
				   })
		begin
		    `uvm_fatal(get_type_name(), "[RAND_FAILED]: Randomization failed due to violation of transaction constraints.")
		end

		// Start the Sub-Sequences on a sequencer.
		subSeq_1.start(p_sequencer.ahb_master_sequencer_0);

	    end

	    begin

		// Declare the lower level Sequences that are used inside this Sequence
		write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) subSeq_2;

		// Create the lower level Sequence objects used.
		subSeq_2 = write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16))::type_id::create("subSeq_2");

		// Randomize the lower level sequences with their constriants
		if(!subSeq_2.randomize() with 
				   {
				    m_m_address == `AHB_CONFIG_PCOUNTER_BASE_ADDR + `CSR_STEP;
				    m_m_wdata == 'h5;
				   })
		begin
		    `uvm_fatal(get_type_name(), "[RAND_FAILED]: Randomization failed due to violation of transaction constraints.")
		end

		// Start the Sub-Sequences on a sequencer.
		subSeq_2.start(p_sequencer.ahb_master_sequencer_0);

	    end

	    begin

		// Declare the lower level Sequences that are used inside this Sequence
		write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16)) subSeq_3;

		// Create the lower level Sequence objects used.
		subSeq_3 = write_bseq#(.ADDR_WIDTH(16), .DATA_WIDTH(16))::type_id::create("subSeq_3");

		// Randomize the lower level sequences with their constriants
		if(!subSeq_3.randomize() with 
				   {
				    m_m_address == `AHB_CONFIG_PCOUNTER_BASE_ADDR + `START_COUNTER;
				    m_m_wdata == 'h1;
				   })
		begin
		    `uvm_fatal(get_type_name(), "[RAND_FAILED]: Randomization failed due to violation of transaction constraints.")
		end

		// Start the Sub-Sequences on a sequencer.
		subSeq_3.start(p_sequencer.ahb_master_sequencer_0);

	    end

endtask : exec_basic_block_0



`endif
